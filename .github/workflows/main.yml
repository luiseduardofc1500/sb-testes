name: CI

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - closed
    branches:
      - 'staging'

jobs:
  # JOB DO BACKEND (COMO VOCÊ MANDOU)
  back_build:
    if: github.event_name == 'push' || (github.event.name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Resolve dependencies
      run: cd backend && mvn dependency:go-offline
    - name: Build with Maven
      run: cd backend && mvn -B clean package -DskipTests
    - name: Run tests
      run: cd backend && mvn -B test
    - name: Run PMD Analysis
      run: cd backend && mvn pmd:pmd pmd:check || true
    - name: Upload PMD Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pmd-report-html
        path: backend/target/site/pmd.html
    
    # ADICIONADO: Empacota o resultado do backend para o job final usar
    - name: Upload backend build
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifact
        path: backend/target/*.jar

  # JOB DO FRONTEND (COMO VOCÊ MANDOU)
  front_build:
    if: github.event_name == 'push' || (github.event.name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend
      - name: Build Frontend
        run: npm run build --prefix frontend
      
      # ADICIONADO: Empacota o resultado do frontend para o job final usar
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/dist # Ou a pasta de build do seu projeto front

  # JOB DE TAG PARA MAIN (COMO VOCÊ MANDOU)
  tag_build_main:
    runs-on: ubuntu-latest
    needs: [back_build, front_build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Add build tag
        run: |
          TAG="build-$(date +'%d-%m-%Y/%H-%M-%S')"
          git tag $TAG
          git push origin $TAG

  # JOB FINAL: CRIA A TAG RC E GERA O ZIP
  create_rc_package:
    runs-on: ubuntu-latest
    needs: [back_build, front_build] # Executa depois dos builds
    permissions:
      contents: write
      actions: read # Precisa ler os artefatos dos jobs anteriores
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # 1. Cria a tag (exatamente como você fez)
      - name: Create and Push new RC tag
        id: create_tag
        run: |
          LATEST_TAG=$(git tag --list 'rc-*' --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="rc-1.0"
          else
            VERSION=$(echo $LATEST_TAG | sed 's/rc-//')
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            NEW_MINOR=$((MINOR + 1))
            NEW_TAG="rc-${MAJOR}.${NEW_MINOR}"
          fi
          echo "Criando nova tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "tag_name=$NEW_TAG" >> $GITHUB_OUTPUT

      # 2. Pega os builds que os outros jobs fizeram
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build

      # 3. Junta tudo e faz o ZIP
      - name: Create system package (zip)
        run: |
          mkdir -p release-content/frontend
          mv build/backend-artifact/* release-content/
          mv build/frontend-artifact/* release-content/frontend/
          zip -r ${{ steps.create_tag.outputs.tag_name }}.zip release-content

      # 4. Deixa o ZIP disponível para download
      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_tag.outputs.tag_name }}
          path: ${{ steps.create_tag.outputs.tag_name }}.zip