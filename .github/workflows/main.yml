name: CI

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - closed
    branches:
      - 'staging'

jobs:
  back_build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Resolve dependencies
      run: cd backend && mvn dependency:go-offline

    - name: Build with Maven
      run: cd backend && mvn -B clean package -DskipTests

    - name: Run tests
      run: cd backend && mvn -B test
      env:
        JAVA_TOOL_OPTIONS: "-Duser.language=pt -Duser.country=BR -Dfile.encoding=UTF-8"

    - name: Run PMD Analysis and Generate Report
      run: cd backend && mvn pmd:pmd pmd:check || true

    - name: Upload PMD Report (HTML)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pmd-report-html
        path: backend/target/site/pmd.html

  front_build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend
      - name: Build Frontend
        run: npm run build --prefix frontend

  tag_build_main:
    runs-on: ubuntu-latest
    needs: [back_build, front_build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Add build tag
        run: |
          TAG="build-$(date +'%d-%m-%Y/%H-%M-%S')"
          git tag $TAG
          git push origin $TAG

  tag_build_rc:
    runs-on: ubuntu-latest
    needs: [back_build, front_build]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    outputs:
      new_tag: ${{ steps.set_tag.outputs.TAG_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create and Push new RC tag
        id: set_tag
        run: |
          # Busca a tag rc-X.Y mais recente
          LATEST_TAG=$(git tag --list 'rc-*' --sort=-v:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # Se nenhuma tag rc- existir, começa com rc-1.0
            NEW_TAG="rc-1.0"
          else
            # Extrai os números de versão X e Y
            VERSION=$(echo $LATEST_TAG | sed 's/rc-//')
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)

            # Incrementa a versão Y
            NEW_MINOR=$((MINOR + 1))
            NEW_TAG="rc-${MAJOR}.${NEW_MINOR}"
          fi
          echo "TAG_NAME=$NEW_TAG" >> $GITHUB_OUTPUT
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

  package_release_rc:
    runs-on: ubuntu-latest
    needs: tag_build_rc
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4

      - name: Set tag name
        run: echo "TAG_NAME=${{ needs.tag_build_rc.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Build backend JAR (again)
        run: |
          cd backend
          mvn -B clean package -DskipTests
          
      - name: Create ZIP package with tag name
        env:
          TAG_NAME: ${{ needs.tag_build_rc.outputs.new_tag }}
        run: |
          mkdir release
          cp backend/target/*.jar release/
          zip -r "$TAG_NAME.zip" release

      - name: Upload Release ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.tag_build_rc.outputs.new_tag }}.zip
          path: ${{ needs.tag_build_rc.outputs.new_tag }}.zip
