name: CI

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - closed
    branches:
      - 'staging'
      - 'production'

jobs:
  back_build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Resolve dependencies
      run: cd backend && mvn dependency:go-offline

    - name: Build with Maven
      run: cd backend && mvn -B clean package -DskipTests

    - name: Run tests
      run: cd backend && mvn -B test
      env:
        JAVA_TOOL_OPTIONS: "-Duser.language=pt -Duser.country=BR -Dfile.encoding=UTF-8"

    - name: Run PMD Analysis and Generate Report
      run: cd backend && mvn pmd:pmd pmd:check || true

    - name: Upload PMD Report (HTML)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pmd-report-html
        path: backend/target/site/pmd.html

  front_build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend
      - name: Build Frontend
        run: npm run build --prefix frontend

  tag_build_main:
    runs-on: ubuntu-latest
    needs: [back_build, front_build, docker_build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Add build tag
        run: |
          TAG="build-$(date +'%d-%m-%Y/%H-%M-%S')"
          git tag $TAG
          git push origin $TAG

  tag_build_rc:
    runs-on: ubuntu-latest
    needs: [back_build, front_build, docker_build]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'staging'
    outputs:
      new_tag: ${{ steps.set_tag.outputs.TAG_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create and Push new RC tag
        id: set_tag
        run: |
          # Busca a tag rc-X.Y mais recente
          LATEST_TAG=$(git tag --list 'rc-*' --sort=-v:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            # Se nenhuma tag rc- existir, começa com rc-1.0
            NEW_TAG="rc-1.0"
          else
            # Extrai os números de versão X e Y
            VERSION=$(echo $LATEST_TAG | sed 's/rc-//')
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)

            # Incrementa a versão Y
            NEW_MINOR=$((MINOR + 1))
            NEW_TAG="rc-${MAJOR}.${NEW_MINOR}"
          fi
          echo "TAG_NAME=$NEW_TAG" >> $GITHUB_OUTPUT
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

  package_release_rc:
    runs-on: ubuntu-latest
    needs: tag_build_rc
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'staging'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tag name
        run: echo "TAG_NAME=${{ needs.tag_build_rc.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Build backend (JAR)
        run: |
          cd backend
          mvn -B clean package -DskipTests

      - name: Build frontend
        run: |
          npm ci --prefix frontend
          npm run build --prefix frontend

      - name: Prepare release folder with build artifacts
        run: |
          mkdir -p release/backend
          mkdir -p release/frontend
          cp backend/target/*.jar release/backend/
          # Ajuste o caminho abaixo conforme o output do build do frontend
          if [ -d frontend/out ]; then
            cp -r frontend/out release/frontend/
          elif [ -d frontend/.next ]; then
            cp -r frontend/.next release/frontend/
          elif [ -d frontend/dist ]; then
            cp -r frontend/dist release/frontend/
          fi

      - name: Create ZIP package with tag name
        env:
          TAG_NAME: ${{ needs.tag_build_rc.outputs.new_tag }}
        run: |
          cd release
          zip -r "../$TAG_NAME.zip" .

      - name: Upload Release ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.tag_build_rc.outputs.new_tag }}.zip
          path: ${{ needs.tag_build_rc.outputs.new_tag }}.zip

  tag_release_production:
    runs-on: ubuntu-latest
    needs: [back_build, front_build, docker_build]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'production'
    outputs:
      new_tag: ${{ steps.set_tag.outputs.TAG_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para buscar todas as tags
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Create and Push new Release tag
        id: set_tag
        run: |
          # 1. Encontra a tag RC mais recente para obter a versão X e Y
          LATEST_RC_TAG=$(git tag --list 'rc-*' --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_RC_TAG" ]; then
            echo "::error::Nenhuma tag 'rc-*' encontrada. Impossível criar a tag de release."
            exit 1
          fi
          VERSION=$(echo $LATEST_RC_TAG | sed 's/rc-//')
          X=$(echo $VERSION | cut -d. -f1)
          Y=$(echo $VERSION | cut -d. -f2)

          NEW_TAG="rel-${X}.${Y}"

          echo "Nova tag de release: $NEW_TAG"
          echo "TAG_NAME=$NEW_TAG" >> $GITHUB_OUTPUT
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

  package_release_production:
    runs-on: ubuntu-latest
    needs: tag_release_production
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'production'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tag name
        run: echo "TAG_NAME=${{ needs.tag_release_production.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Build backend (JAR)
        run: |
          cd backend
          mvn -B clean package -DskipTests

      - name: Build frontend
        run: |
          npm ci --prefix frontend
          npm run build --prefix frontend

      - name: Prepare release folder with build artifacts
        run: |
          mkdir -p release/backend
          mkdir -p release/frontend
          cp backend/target/*.jar release/backend/
          # Ajuste o caminho abaixo conforme o output do build do frontend
          if [ -d frontend/out ]; then
            cp -r frontend/out release/frontend/
          elif [ -d frontend/.next ]; then
            cp -r frontend/.next release/frontend/
          elif [ -d frontend/dist ]; then
            cp -r frontend/dist release/frontend/
          fi

      - name: Create ZIP package with tag name
        env:
          TAG_NAME: ${{ needs.tag_release_production.outputs.new_tag }}
        run: |
          cd release
          zip -r "../$TAG_NAME.zip" .

      - name: Upload Release ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.tag_release_production.outputs.new_tag }}.zip
          path: ${{ needs.tag_release_production.outputs.new_tag }}.zip

  docker_build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: back_build
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/sistema-bancario
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
